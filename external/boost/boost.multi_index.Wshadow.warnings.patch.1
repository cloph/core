--- boost/boost/multi_index/sequenced_index.hpp	2008-07-03 18:51:53.000000000 +0200
+++ boost/boost/multi_index/sequenced_index.hpp	2013-05-17 15:44:15.265289335 +0200
@@ -346,7 +346,7 @@
   }
 
   template<typename Modifier,typename Rollback>
-  bool modify(iterator position,Modifier mod,Rollback back)
+  bool modify(iterator position,Modifier mod,Rollback back_)
   {
     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(position);
     BOOST_MULTI_INDEX_CHECK_DEREFERENCEABLE_ITERATOR(position);
@@ -363,7 +363,7 @@
 #endif
 
     return this->final_modify_(
-      mod,back,static_cast<final_node_type*>(position.get_node()));
+      mod,back_,static_cast<final_node_type*>(position.get_node()));
   }
 
   void swap(sequenced_index<SuperMeta,TagList>& x)
--- boost/boost/multi_index_container.hpp	2010-07-24 11:20:29.000000000 +0200
+++ boost/boost/multi_index_container.hpp	2013-05-17 15:45:56.723899853 +0200
@@ -360,7 +360,7 @@
     IteratorType it
     BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int,N))
   {
-    typedef typename nth_index<N>::type index;
+    typedef typename nth_index<N>::type index_;
 
 #if !defined(__SUNPRO_CC)||!(__SUNPRO_CC<0x580) /* fails in Sun C++ 5.7 */
     BOOST_STATIC_ASSERT(
@@ -371,7 +371,7 @@
     BOOST_MULTI_INDEX_CHECK_IS_OWNER(
       it,static_cast<typename IteratorType::container_type&>(*this));
 
-    return index::make_iterator(static_cast<node_type*>(it.get_node()));
+    return index_::make_iterator(static_cast<node_type*>(it.get_node()));
   }
 
   template<int N,typename IteratorType>
@@ -379,7 +379,7 @@
     IteratorType it
     BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(int,N))const
   {
-    typedef typename nth_index<N>::type index;
+    typedef typename nth_index<N>::type index_;
 
 #if !defined(__SUNPRO_CC)||!(__SUNPRO_CC<0x580) /* fails in Sun C++ 5.7 */
     BOOST_STATIC_ASSERT((
@@ -390,7 +390,7 @@
     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(it);
     BOOST_MULTI_INDEX_CHECK_IS_OWNER(
       it,static_cast<const typename IteratorType::container_type&>(*this));
-    return index::make_iterator(static_cast<node_type*>(it.get_node()));
+    return index_::make_iterator(static_cast<node_type*>(it.get_node()));
   }
 #endif
 
@@ -414,7 +414,7 @@
     IteratorType it
     BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Tag))
   {
-    typedef typename index<Tag>::type index;
+    typedef typename index<Tag>::type index_;
 
 #if !defined(__SUNPRO_CC)||!(__SUNPRO_CC<0x580) /* fails in Sun C++ 5.7 */
     BOOST_STATIC_ASSERT(
@@ -424,7 +424,7 @@
     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(it);
     BOOST_MULTI_INDEX_CHECK_IS_OWNER(
       it,static_cast<typename IteratorType::container_type&>(*this));
-    return index::make_iterator(static_cast<node_type*>(it.get_node()));
+    return index_::make_iterator(static_cast<node_type*>(it.get_node()));
   }
 
   template<typename Tag,typename IteratorType>
@@ -432,7 +432,7 @@
     IteratorType it
     BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Tag))const
   {
-    typedef typename index<Tag>::type index;
+    typedef typename index<Tag>::type index_;
 
 #if !defined(__SUNPRO_CC)||!(__SUNPRO_CC<0x580) /* fails in Sun C++ 5.7 */
     BOOST_STATIC_ASSERT((
@@ -443,7 +443,7 @@
     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(it);
     BOOST_MULTI_INDEX_CHECK_IS_OWNER(
       it,static_cast<const typename IteratorType::container_type&>(*this));
-    return index::make_iterator(static_cast<node_type*>(it.get_node()));
+    return index_::make_iterator(static_cast<node_type*>(it.get_node()));
   }
 #endif
 
@@ -886,7 +886,7 @@
   }
 
   template<typename Modifier,typename Rollback>
-  bool modify_(Modifier& mod,Rollback& back,node_type* x)
+  bool modify_(Modifier& mod,Rollback& back_,node_type* x)
   {
     mod(const_cast<value_type&>(x->value()));
 
@@ -896,7 +896,7 @@
     }
     BOOST_CATCH(...){
       BOOST_TRY{
-        back(const_cast<value_type&>(x->value()));
+        back_(const_cast<value_type&>(x->value()));
         BOOST_RETHROW;
       }
       BOOST_CATCH(...){
@@ -909,7 +909,7 @@
 
     BOOST_TRY{
       if(!b){
-        back(const_cast<value_type&>(x->value()));
+        back_(const_cast<value_type&>(x->value()));
         return false;
       }
       else return true;
--- boost/boost/multi_index/detail/rnd_index_loader.hpp	2008-07-03 18:51:53.000000000 +0200
+++ boost/boost/multi_index/detail/rnd_index_loader.hpp	2015-03-28 19:55:34.695640663 +0100
@@ -86,14 +86,14 @@
     }
   }
 
-  void rearrange(node_impl_pointer position,node_impl_pointer x)
+  void rearrange(node_impl_pointer position_,node_impl_pointer x)
   {
     preprocess(); /* only incur this penalty if rearrange() is ever called */
-    if(position==node_impl_pointer(0))position=header;
+    if(position_==node_impl_pointer(0))position_=header;
     next(prev(x))=next(x);
     prev(next(x))=prev(x);
-    prev(x)=position;
-    next(x)=next(position);
+    prev(x)=position_;
+    next(x)=next(position_);
     next(prev(x))=prev(next(x))=x;
   }
 
--- boost/boost/multi_index/detail/rnd_index_ptr_array.hpp	2013-07-24 09:52:40.000000000 +0200
+++ boost/boost/multi_index/detail/rnd_index_ptr_array.hpp	2015-03-28 20:07:05.495571347 +0100
@@ -53,9 +53,9 @@
   >::type::pointer                                  pointer;
 
   random_access_index_ptr_array(
-    const Allocator& al,value_type end_,std::size_t size):
-    size_(size),
-    capacity_(size),
+    const Allocator& al,value_type end_,std::size_t sz):
+    size_(sz),
+    capacity_(sz),
     spc(al,capacity_+1)
   {
     *end()=end_;
--- boost/boost/multi_index/random_access_index.hpp	2013-07-24 09:52:40.000000000 +0200
+++ boost/boost/multi_index/random_access_index.hpp	2015-03-28 19:57:48.047643827 +0100
@@ -467,7 +467,7 @@
   }
 
   template<typename Modifier,typename Rollback>
-  bool modify(iterator position,Modifier mod,Rollback back)
+  bool modify(iterator position,Modifier mod,Rollback back_)
   {
     BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR(position);
     BOOST_MULTI_INDEX_CHECK_DEREFERENCEABLE_ITERATOR(position);
@@ -484,7 +484,7 @@
 #endif
 
     return this->final_modify_(
-      mod,back,static_cast<final_node_type*>(position.get_node()));
+      mod,back_,static_cast<final_node_type*>(position.get_node()));
   }
 
   void swap(random_access_index<SuperMeta,TagList>& x)
--- boost/boost/multi_index/detail/rnd_index_ops.hpp	2015-05-31 00:27:17.451944336 +0000
+++ boost/boost/multi_index/detail/rnd_index_ops.hpp	2015-05-31 00:27:27.295946846 +0000
@@ -176,7 +176,6 @@
 
   if(ptrs.size()<=1)return;
 
-  typedef typename Node::value_type         value_type;
   typedef typename Node::impl_pointer       impl_pointer;
   typedef typename Node::impl_ptr_pointer   impl_ptr_pointer;
   typedef random_access_index_sort_compare<
